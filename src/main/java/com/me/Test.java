package com.me;

public class Test {

    public static void main(String[] args) throws Exception {

        //每台计算机都需要正确配置IP地址和子网掩码，根据这两个就可以计算网络号，
        // 如果两台计算机计算出的网络号相同，说明两台计算机在同一个网络，可以直接通信。
        // 如果两台计算机计算出的网络号不同，那么两台计算机不在同一个网络，不能直接通信，
        // 它们之间必须通过路由器或者交换机这样的网络设备间接通信，我们把这种设备称为网关。
        //网关的作用就是连接多个网络，负责把来自一个网络的数据包发到另一个网络，这个过程叫路由。
        //IP = 101.202.99.2
        //Mask = 255.255.255.0
        //Network = IP & Mask = 101.202.99.0

        //通常使用域名访问某个特定的服务。域名解析服务器DNS负责把域名翻译成对应的IP，客户端再根据IP地址访问服务器。
        //用nslookup可以查看域名对应的IP地址

        /**
         * OSI（Open System Interconnect）网络模型是ISO组织定义的一个计算机互联的标准模型，注意它只是一个定义，
         *目的是为了简化网络各层的操作，提供标准接口便于实现和维护。这个模型从上到下依次是：
         *
         * 应用层，提供应用程序之间的通信；
         * 表示层：处理数据格式，加解密等等；
         * 会话层：负责建立和维护会话；
         * 传输层：负责提供端到端的可靠传输；
         * 网络层：负责根据目标地址选择路由来传输数据；
         * 链路层、物理层：负责把数据进行分片并且真正通过物理网络传输，例如，无线网、光纤等。
         *
         * 互联网实际使用的TCP/IP模型并不是对应到OSI的7层模型，而是大致对应OSI的5层模型：
         *
         * OSI	TCP/IP
         * 应用层	应用层
         * 表示层
         * 会话层
         * 传输层	传输层
         * 网络层	IP层
         * 链路层	网络接口层
         * 物理层
         */

        /**
         * 一个Socket就是由IP地址和端口号（范围是0～65535）组成，可以把Socket简单理解为IP地址加端口号。
         * 端口号总是由操作系统分配，它是一个0～65535之间的数字，
         * 其中，小于1024的端口属于特权端口，需要管理员权限，大于1024的端口可以由任意用户的应用程序打开。
         * 使用Socket进行网络编程时，本质上就是两个进程之间的网络通信。
         * 其中一个进程必须充当服务器端，它会主动监听某个指定的端口，另一个进程必须充当客户端，它必须主动连接服务器的IP地址和指定端口，
         * 如果连接成功，服务器端和客户端就成功地建立了一个TCP连接，双方后续就可以随时发送和接收数据。
         */


    }

}
